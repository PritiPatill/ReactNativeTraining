				ES 6
....................................................................................
What is ES 6?
  IT is just version no of javascript language.

What is javascript?
   Javascript is Object based,functional style programming language.

Version of Javascript:

Javascript language created for browsers in 1995 for building dynamic web pages by NetsCap Communication.

After javascript language created, the language was submitted to standard body called
"ECMA" international

After submission, the language was standarized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
etc.....

Javascript learning path(ES6):
..............................
1.Language fundamentals
2.Functions 
3.Objects
4.Async Programming

1.Language fundamentals
 ->Variables
 ->Literals
 ->Type Systems

Project creation

G:\IBM\2024\Nov\ReactiveNative-B1>mkdir es6apps

G:\IBM\2024\Nov\ReactiveNative-B1>cd es6apps

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>mkdir src

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>code .

create index.html inside project 

es6apps/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 APPS</title>
</head>
<body>
    <h1>ES 6 apps</h1>
</body>
</html>

Install web server:
 Go to vs code Extensions section 
   search "live server" - after finding,install liver server
   restart ide
write all js code within src folder

src/index.js


es6apps/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 APPS</title>
</head>
<body>
    <h1>ES 6 apps</h1>
    <script src="src/index.js"></script>
</body>
</html>
.....................................................................................
1.variable declarations

var,let,const -keywords to declare variables
 
 let /const - es 6 keywords
eg:
 let firstName

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object


3.Data types
   js is dynamic typed language-the type of variable is understood only during runtime.
  int a =10 - strongly typed
  let a =20 - dynamic typed

  literal   - type
....................
  string    - string
  number    - number
  boolean   - boolean
  undfined   - undefined
  NaN       - number
  Infinity  - number
  function  - function
  object    - object
  null      - object

Running Env:

1.node js - command line
2.Browser
3.Mobile

...................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types


Strings:
//strings : "",'',``,${}
//Strings
let firstName = "Subramanian"
let lastName = 'Murugan'
//back tick and string interpolation
let fullName = firstName + lastName // traditional 
console.log('Name' + firstName)
//back tick 
fullName = `${firstName} ${lastName}`
console.log(`Full Name ${fullName}`) // string interpoltion

//multi line strings
let doc = `
   <html>
      <head>
          <title></title>
      </head>
    <body>
    </body>
 </html>
`
console.log(doc)

Numbers:
 only type called number 
 64 bit aka double.

//numbers
let a = 10
let b = 20
let c = a + b 
console.log(`c ${c}`)

Booleans:
 true or false

//true or false 

let isValid = true
let isEnabled = false
console.log(`Valid ${isValid} Enabled ${isEnabled}`)


Undefined:
 Variable is declared without any valid value.

let price;
console.log(`Price is ${price}`)

NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix beacuse is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let price;
let qty = 100;
let totalPrice = price * qty; //undefined * 100
console.log(`Total Price is ${totalPrice}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)

..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */

//advanced booleans 

let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}
...................................................................................
....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}

const:
   it is read only where as let is reassignable.

let a = 10;
console.log(`a ${a}`)
a = 90
console.log(`a ${a}`)

const b = 90;
console.log(`b ${b}`)
b = 90
console.log(`b ${b}`)
.....................................................................................
.....................................................................................
			   Functions
....................................................................................

functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values


//basic function declaration

function sayHello() {
    console.log('hello')
}
//invoke function 
sayHello()
			
..

function args,parameters, with default value
//default args and parameters

function math(a = 0, b = 0) {
    let c = a * b
    console.log(`Result is ${c}`)
}
math(10, 10)
math("a", "b")
math()

functions and return values:
............................
function math(a = 0, b = 0) {
   return a * b
}
const result = math(10, 10)
console.log(result)
console.log(math())

....................................................................................
			  Functional Programming
....................................................................................
According to functional programming, function is just value like numbers,strings.

since function is value can be assigned to a variable.

If you assign the function with variable, then that function can be called with variableName.

if you declare function with variables, without function name called "Anonymous function".

//a is variable
//let is keyword
//10 is literal - number literal
let a = 10;
//function itself is literal accoriding to functional programming.

//hello is just variable,holding function value(literal)
let hello = function () {
    console.log('hello')
}
//since function is value , can be assigned to variable, later that variable can be used to invoke that function. 
//function without name is called anonymous function 
hello()

............

AnonyMous functions and args values:
......................................

//anonymous fun and args 

let add = function (a = 0, b = 0) {
    let c = a + b
    console.log(`C ${c}`)
}

add(10, 10)
add()

anonymous functions and return values:
//anonymous fun and args 

let add = function (a = 0, b = 0) {
    let c = a + b
    return c 
}

console.log(add(10, 10))
console.log(add())
.....................................................................................
			Anonymous function with arrow notation
				Arrow functions
.....................................................................................
//es 5 anonymous function
let hello = function () {
    console.log('hello')
}
hello()
//es 6 arrow anonymous function
let hai = () => {
    console.log('hai')
}
hai()
//short cut: if function body has only one line of code: we can remove {}
hai = () => console.log('hai')
hai()
//arrow with parameters
let math = (a = 0, b = 0) => {
    let c = a * b
    console.log(`C ${c}`)
}
math(10, 10)
//arrow with parameters, with return
let multiply = (a = 0, b = 0) => {
    return a * b
}
console.log(multiply(10, 10))

//if fun has only return statement, we can remove {} and return statement
multiply = (a = 0, b = 0) => a * b
console.log(multiply(10, 10))


.....................................................................................			 	Higher order functions
....................................................................................
   Since function is value can be passed to another function as parameter(value) and also return function from  another function.

//function as parameter

function add(a, b) {
    return a + b
}
//passing value
//via variable
let x = 10
let y = 20
console.log(add(x, y))

//via values directly
console.log(add(20, 30))
///////////////////////////////////////////////////////////

function connect(cb) {
    cb()
}
let hello = function () {
    console.log('hello')
}
connect(hello)

connect(function () {
    console.log('hello')
})
//////////////////////////////////////////////////////////////////////////////
//hof with parameters
function calculate(cb) {
    cb(20, 30)
}
let adder = function (a = 0, b = 20) {
    console.log(a + b)
}
calculate(adder)
calculate(function (a = 0, b = 0) {
    console.log(a + b)
})
//hof with parameters and return value

function calc(cb) {
    let result = cb(10, 10)
    console.log(result)
}
adder = function (a = 0, b = 20) {
    return a + b
}
calc(adder)
calc(function (a = 0, b = 0) {
    return a + b
})
//hof with other parameters

function login(userName, password, success, failure) {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }
}
login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
login('foo', 'bar', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
.....................................................................................
			Arrow functions and hof
...................................................................................
// function connect(cb) {
//     cb()
// }
let connect = (cb) => cb()

// let hello = function () {
//     console.log('hello')
// }
let hello = () => console.log('hello')
connect(hello)

connect(() => console.log('hello'))

let calculate = (cb) => cb(20, 30)

let adder = (a = 0, b = 20) => console.log(a + b)
calculate(adder)

calculate((a = 0, b = 0) => console.log(a + b))

let login = (userName, password, success, failure) => {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }
}
login('admin', 'admin', (status) => console.log(status), (err) => console.log(err))

login('foo', 'bar', (status) => console.log(status), (err) => console.log(err))
.....................................................................................
			Objects
....................................................................................

Objects can be created in two ways

1.constructors pattern
   es 5 functions 
   es 6 classes
2.literal pattern


class Employee {
    //state
    id = 0
    name = 'Subramanian'
    salary = 1000
    //methods
    calculateSalary() {
        return this.salary * 2
    }
    calculateLeave = () => {
        return 10
    }
}
//create instance
//let is keyword
//emp is just reference variable
//new  is operator
//Employee() is constructor call(function call)
let emp = new Employee()
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`id ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

..................................................................................
			State initalization
...................................................................................

1.inside class directly
2.inside class inside construcotr
3.outside class using reference variable

1.inside class directly

class Employee {
    //state
    id = 0
    name = 'Subramanian'
    salary = 1000
    //methods
    calculateSalary() {
        return this.salary * 2
    }
    calculateLeave = () => {
        return 10
    }
}
2.inside class inside constructor

1.only one constructor declaration is allowed
2.constructors are declared using built in constructor function.
3.constructor can take arg, which is called constructor overloading


class Employee {
    //state
    id
    name
    salary
    constructor() {
        this.id = 0
        this.name = 'Subramanian'
        this.salary = 1000
    }

    //methods
    calculateSalary() {
        return this.salary * 2
    }
    calculateLeave = () => {
        return 10
    }
}
let emp = new Employee()
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`id ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

Constructor parameters:
class Employee {
    //state
    id
    name
    salary
    constructor(id = 0, name = 'Subramanian', salary = 1000) {
        this.id = id
        this.name = name
        this.salary = salary
    }

    //methods
    calculateSalary() {
        return this.salary * 2
    }
    calculateLeave = () => {
        return 10
    }
}
let emp = new Employee()
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`id ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

emp = new Employee(2, 'Ram', 2400)
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`id ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

3.Outside class, after object creation.
class Employee {
    //state
    id
    name
    salary
    constructor(id = 0, name = 'Subramanian', salary = 1000) {
        this.id = id
        this.name = name
        this.salary = salary
    }

    //methods
    calculateSalary() {
        return this.salary * 2
    }
    calculateLeave = () => {
        return 10
    }
}
let emp = new Employee()
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

emp = new Employee(2, 'Ram', 2400)
console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)

//reinitalize the value
emp.id = 900
emp.name = 'Raja'
emp.salary = 8000

console.log(`id ${emp.id}`)
console.log(`name ${emp.name}`)
console.log(`salary ${emp.salary}`)
console.log(`totalSalary ${emp.calculateSalary()}`)
.....................................................................................
			 Inheritance
.....................................................................................
//parent
class Account {
    constructor() {
        console.log('account is initalized')
    }
    deposit() {
        return 0
    }
}
//child
class SavingsAccount extends Account {
    constructor() {
        super()
        console.log('SavingsAccount is initalized')
    }
    //redefining(overriding)
    deposit() {
        return 1000
    }
}
let sb = new SavingsAccount()
console.log(sb.deposit())
...................................................................................
			  literal objects
...................................................................................

No class and No function , still we can object....

//literal

let employee = {
    id: 1,
    name: 'Subramanian',
    salary: 1000
}
console.log(employee.id)
console.log(employee.name)
console.log(employee.salary)

//nested object

let product = {
    id: 1,
    category: {
        id: 1,
        name: 'Electronics'
    }
}
console.log(product.id, product.category.name)
..................................................................................
				Arrays
...................................................................................

Arrays core datastructure
Array can hold any value
Array is object which lot of methods

let list = ['apple', 'orange', 'jackfruit']
//iterate array : for loop, for..each,filter,map,reduce etc...
list.forEach(item => {
    console.log(item)
})
//array of objects

let todos = [
    { id: 1, status: 'done', title: 'learn js' },
    { id: 2, status: 'pending', title: 'learn react' },
    { id: 3, status: 'pending', title: 'learn react native' }
]
todos.forEach(todo => {
    console.log(todo.id, todo.status, todo.title)
})
....................................................................................	
			Object destructuring
...................................................................................
How to destructure object properties when it is passed as arg

// function printEmployee(employee) {
//     console.log(`Id ${employee.id}`)
//     console.log(`name ${employee.name}`)
//     console.log(`City ${employee.address.city}`)
// }

//with destructuring
// function printEmployee(employee) {
//     const { id, name, address: { city } } = employee
//     console.log(`Id ${id}`)
//     console.log(`name ${name}`)
//     console.log(`City ${city}`)
// }
function printEmployee({ id, name, address: { city } }) {
    console.log(`Id ${id}`)
    console.log(`name ${name}`)
    console.log(`City ${city}`)
}

printEmployee({ id: 1, name: 'Subramanian', address: { city: 'Coimbatore' } })

..................................................................................
			Return object and destructuring
..................................................................................
// function getStock() {
//     return {
//         id: 1,
//         symbol: 'google',
//         qty: 100,
//         price: 1000
//     }
// }
// console.log(getStock())

// function getStock(id = 0, symbol = 'Foo', qty = 0, price = 0) {
//     return {
//         id: id,
//         symbol: symbol,
//         qty: qty,
//         price: price
//     }
// }
// console.log(getStock(1, 'google', 100, 1000))
// console.log(getStock())

// function getStock(id = 0, symbol = 'Foo', qty = 0, price = 0) {
//     //destructuring
//     return {
//         //left;right if same,make it
//         id,
//         symbol,
//         qty,
//         price
//     }
// }
// const getStock = (id = 0, symbol = 'Foo', qty = 0, price = 0) => {
//     return {
//         id,
//         symbol,
//         qty,
//         price
//     }
// }
const getStock = (id = 0, symbol = 'Foo', qty = 0, price = 0) => ({
    id,
    symbol,
    qty,
    price
})

console.log(getStock(1, 'google', 100, 1000))
console.log(getStock())
.....................................................................................
			 Async programming
.....................................................................................

Async programming which does not block current thread,work is done in kernal parts.
Results are returned from the kernal using event driven arch.

How to implement async programming?

Req:
1.High level non blocking apis provided by js language.
        -timers,ajax,web socket....
2.Listener function to  handle async results which is called as callbacks.
3.Callbacks are implemented using Higher order Function(function as parameter)


Styles of writing async programming:

1.callbacks pattern
2.Promise Pattern
3.Promise with async and await
4.Reactive Programming via rxjs...


function blockMe(message) {
    console.log(message)
}
function sayHello(callback) {
    setTimeout(callback, 5000)
}
function main() {
    blockMe('start')
    sayHello(function () {
        console.log('hello')
    })
    blockMe('end')
}
main()

Arrow Version:
function blockMe(message) {
    console.log(message)
}
function sayHello(callback) {
    setTimeout(callback, 5000)
}
function main() {
    blockMe('start')
    sayHello(() => {
        console.log('hello')
    })
    blockMe('end')
}
main()

..................

Callback with data:
function blockMe(message) {
    console.log(message)
}
function sayHello(abc) {
    setTimeout(abc, 5000,'Hello')
}
function main() {
    blockMe('start')
    sayHello((message) => {
        console.log(message)
    })
    blockMe('end')
}
main()
.......................

callback with realtime example.


//resolve=success,reject=failure
const login = (userName, password, resolve, reject) => {
    if (userName === 'admin' && password === 'admin') {
        setTimeout(resolve, 1000, 'login success')
    } else {
        setTimeout(reject, 1000, 'login is failed')
    }
}
function main() {
    login('admin', 'admin', (status) => {
        console.log(status)
    }, (err) => {
        console.log(err)
    })

    login('xx', 'yy', (status) => {
        console.log(status)
    }, (err) => {
        console.log(err)
    })

}
main()
...................................................................................
				callback chaining
..................................................................................

The output one callback will input for another callback.

in sequetional code

const res1 = api1()
const res2 =api2(res1)

in Async code ? callback chaining.

const getUser = (resolve, reject) => {
    console.log('getUser is called')
    let user = { name: 'admin' }
    //    user = null
    if (user) {
        setTimeout(resolve, 1000, user)
    } else {
        setTimeout(reject, 1000, 'User not found')
    }
}
const login = (user, resolve, reject) => {
    console.log('login is called')
    if (user.name === 'admin') {
        setTimeout(resolve, 1000, 'login is success')
    } else {
        setTimeout(reject, 1000, 'login is failed')
    }
}
const showdashbaord = (status, resolve, reject) => {
    console.log('showdashbaord is called')
    if (status === 'login is success') {
        setTimeout(resolve, 1000, 'welcome to dashboard')
    } else {
        setTimeout(reject, 1000, 'welcome to guest')
    }
}

function main() {
    getUser(user => {
        login(user, status => {
            showdashbaord(status, adminPage => {
                console.log(adminPage)
            }, errPage => {
                console.log(errPage)
            })
        }, err => {
            console.log(err)
        })
    }, err => {
        console.log(err)
    })
}
main()

Callback Hell:
..............
getUser(user => {
    login(user, status => {
        console.log(status)
    }, err => {
        console.log(err)
    })
}, err => {
    console.log(err)
})


fs.readdir(source, function (err, files) {
  if (err) {
    console.log('Error finding files: ' + err)
  } else {
    files.forEach(function (filename, fileIndex) {
      console.log(filename)
      gm(source + filename).size(function (err, values) {
        if (err) {
          console.log('Error identifying file size: ' + err)
        } else {
          console.log(filename + ' : ' + values)
          aspect = (values.width / values.height)
          widths.forEach(function (width, widthIndex) {
            height = Math.round(width / aspect)
            console.log('resizing ' + filename + 'to ' + height + 'x' + height)
            this.resize(width, height).write(dest + 'w' + width + '_' + filename, function(err) {
              if (err) console.log('Error writing file: ' + err)
            })
          }.bind(this))
        }
      })
    })
  }

In the above code:

Are you able to understand code?
Are you able to debug code easily?
Are you able to scale code?

No!
 This is called "Callback Hell".

How to avoid callback hell or how to write clean async code? how to write simple async programming without callback hell?
.....................................................................................
			 Promises
....................................................................................
Promises:
.........
Promise is design pattern which hides complexity of callback patterns

Since Promise is design pattern, many people have implemented Promise design pattern.

1.JQuery -first promise implementation
2.many libs and frameworks

In order standarize , ECMA committe decided to include Promise Design pattern at language level .(ES 6)
2012 E6 Committe introduced promise design pattern  as  "Promise" Object  in javascript.

.....................................................................................
			  Promise Implementation
.....................................................................................

Features of Promise Object:
1.Promise by deafult is Async. Which implements timer api with 0 ms .
2.Promise can be used with any async callback based  implementations.


Objective:

 To remove callbacks in async/non blocking code. write cleaner async programming.
 To remove complex callback chaining code.

Difference between callbacks and promises:

Essentially, a promise is a returned object to which you attach callbacks, instead of passing callbacks into a function.

....................................................................................

		Promise Implemenation: Object  creations
...................................................................................

1. Create Promise Object from Promise contructor
      new Promise()
2. Create Promise object from factory apis 
      Promise.resolve() / Promise.reject()



Promise object methods:

1.then - success
2.catch - errors
3.finally - clean up

factory api to create Promise object
4.resolve
5.reject
.......................................
6.all
7.race

1.Promise factory api
   -success - resolve
   -failure - reject

Promise with Success:
//Promise object creation using Promise Factory apis .

function blockMe(message) {
    console.log(message)
}
function getValue() {
    return Promise.resolve('success')
}

function main() {
    blockMe('start')
    getValue().then(message=>console.log(message))
    blockMe('end')
}
main()

Promise with failure:
....................
function blockMe(message) {
    console.log(message)
}
function getError() {
    return Promise.reject('oops something went wrong')
}

function main() {
    blockMe('start')
    getError().catch(err=>console.log(err))
    blockMe('end')
}
main()

promise with success and error:
...............................

function blockMe(message) {
    console.log(message)
}
const login = (userName, password) => {
    if (userName === 'admin' && password === 'admin') {
        return Promise.resolve('login success')
    } else {
        return Promise.reject('login is failed')
    }
}

function main() {
    blockMe('start')
    login('admin', 'admin')
        .then(status => console.log(status))
        .catch(err => console.log(err))
    blockMe('end')
}
main()
...................................................................................
			Timer with Promise
...................................................................................

We have to use Promise Constructor pattern in order to wrap any existing async api such as timer,ajax....

function blockMe(message) {
    console.log(message)
}

const login = (userName, password) => {
    return new Promise((resolve, reject) => {
        if (userName === 'admin' && password === 'admin') {
            setTimeout(resolve, 1000, 'login success')
        } else {
            setTimeout(reject, 1000, 'login failed')
        }
    })
}

function main() {
    blockMe('start')
    login('admin', 'admin')
        .then(status => console.log(status))
        .catch(err => console.log(err))
    blockMe('end')
}
main()
.................................................................................

Callback Chaining and Promise:
..............................
const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = { name: 'admin' }
        //    user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, 'User not found')
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'login is success')
        } else {
            setTimeout(reject, 1000, 'login is failed')
        }
    });
}
const showdashbaord = (status, resolve, reject) => {
    console.log('showdashbaord is called')
    return new Promise((resolve, reject) => {
        if (status === 'login is success') {
            setTimeout(resolve, 1000, 'welcome to dashboard')
        } else {
            setTimeout(reject, 1000, 'welcome to guest')
        }
    })
}

function main() {
    // getUser(user => {
    //     login(user, status => {
    //         showdashbaord(status, adminPage => {
    //             console.log(adminPage)
    //         }, errPage => {
    //             console.log(errPage)
    //         })
    //     }, err => {
    //         console.log(err)
    //     })
    // }, err => {
    //     console.log(err)
    // })

    // getUser()
    //     .then(user => {
    //         return login(user)
    //     })
    //     .then(status => {
    //         return showdashbaord(status)
    //     })
    //     .then(page => {
    //         console.log(page)
    //     })
    //     .catch(err => { console.log(err) })
    getUser()
        .then(user => login(user))
        .then(status => showdashbaord(status))
        .then(page => console.log(page))
        .catch(err => { console.log(err) })
}
main()
...................................................................................
			Promise Chaining -Promise Hell
..................................................................................

getUser()
    .then(user => login(user))
    .then(status => console.log(status))
    .catch(err => console.log(err))

Here the code is having so many "then ables", in realtime if we have many more thens which makes code even harder.

ES 7 introduced new feature called "async and await"  which are keywords , when we resolve promises we dont need to use thens and catch.

We can write more declarative,sync style of async code.


const getUser = () => {
    console.log('getUser is called')
    return new Promise((resolve, reject) => {
        let user = { name: 'admin' }
        //    user = null
        if (user) {
            setTimeout(resolve, 1000, user)
        } else {
            setTimeout(reject, 1000, 'User not found')
        }
    })
}
const login = user => {
    console.log('login is called')
    return new Promise((resolve, reject) => {
        if (user.name === 'admin') {
            setTimeout(resolve, 1000, 'login is success')
        } else {
            setTimeout(reject, 1000, 'login is failed')
        }
    });
}
const showdashbaord = (status, resolve, reject) => {
    console.log('showdashbaord is called')
    return new Promise((resolve, reject) => {
        if (status === 'login is success') {
            setTimeout(resolve, 1000, 'welcome to dashboard')
        } else {
            setTimeout(reject, 1000, 'welcome to guest')
        }
    })
}

async function main() {
    // getUser()
    //     .then(user => login(user))
    //     .then(status => showdashbaord(status))
    //     .then(page => console.log(page))
    //     .catch(err => { console.log(err) })
    try {
        const user = await getUser()
        const status = await login(user)
        const page = await showdashbaord(status)
        console.log(page)
    }
    catch (err) {
        console.log(err)
    }
}
main()
....................................................................................
			  Module Pattern-ES 6 Modules
.....................................................................................
Module patterns
1.namespace design pattern
2.AMD
3.Commonjs
4.ES 6 Module pattern
5.System
6.UMD

COMMON JS and ES 6 only in dev..


How to write code across files and folders?

src/util/myutil.js
src/services/Todo.service.js

Module pattern provides keywords:

1.export,export default -  to share code
2.import - link files


src/lib.js
export const firstName = 'Subramnaian'

src/index.js
import { firstName } from "./lib.js";


function main(){
  console.log(firstName)
}
main()

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 APPS</title>
</head>
<body>
    <h1>ES 6 apps</h1>
    <script src="src/index.js" type="module"></script>
</body>
</html>

/...

src/lib.js
// export const firstName = 'Subramnaian'
// export const lastName = 'Murugan'
// export const city = 'Coimbatore'
// export const skills = ['java', 'js', 'react']
// export const isActive = true
// export const isEnabled = () => true

const firstName = 'Subramnaian'
const lastName = 'Murugan'
const city = 'Coimbatore'
const skills = ['java', 'js', 'react']
const isActive = true
const isEnabled = () => true

export { firstName, lastName, city, skills, isActive, isEnabled }

src/index.js
import { firstName,lastName,isActive,isEnabled,skills } from "./lib.js";


function main(){
  console.log(firstName,lastName)
  console.log(isActive)
  console.log(isEnabled())
  console.log(skills)

}
main()
.....................................................................................
			export default
.....................................................................................


// export default class TodoService {

//     findAll() {
//         return [{
//             id: 1, status: true, text: 'learn todo'
//         }]
//     }
// }
class TodoService {

    findAll() {
        return [{
            id: 1, status: true, text: 'learn todo'
        }]
    }
}

export default TodoService;

// export default class CustomerService {

//     findAll() {
//         return [{
//             id: 1, status: true, text: 'learn todo'
//         }]
//     }
// }


src/index.js
import TodoService from "./todo.service.js";

function main() {
    let todoService = new TodoService()
    console.log(todoService.findAll())
}
main()

Note:
1.per file only one export default is allowed.
.....................................................................................
			export and export default together
...................................................................................

src/util.js
export const message = 'Hello'
export const name = 'Subramanian'
export default class Greeter {
    sayGreet() {
        return 'greet'
    }
}

src/index.js
import Greeter, { name, message } from "./util.js";

function main(){
  let greet = new Greeter();
  console.log(greet.sayGreet())
  console.log(name,message)
}
main()
