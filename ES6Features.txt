				ES 6
....................................................................................
What is ES 6?
  IT is just version no of javascript language.

What is javascript?
   Javascript is Object based,functional style programming language.

Version of Javascript:

Javascript language created for browsers in 1995 for building dynamic web pages by NetsCap Communication.

After javascript language created, the language was submitted to standard body called
"ECMA" international

After submission, the language was standarized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
etc.....

Javascript learning path(ES6):
..............................
1.Language fundamentals
2.Functions 
3.Objects
4.Async Programming

1.Language fundamentals
 ->Variables
 ->Literals
 ->Type Systems

Project creation

G:\IBM\2024\Nov\ReactiveNative-B1>mkdir es6apps

G:\IBM\2024\Nov\ReactiveNative-B1>cd es6apps

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>mkdir src

G:\IBM\2024\Nov\ReactiveNative-B1\es6apps>code .

create index.html inside project 

es6apps/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 APPS</title>
</head>
<body>
    <h1>ES 6 apps</h1>
</body>
</html>

Install web server:
 Go to vs code Extensions section 
   search "live server" - after finding,install liver server
   restart ide
write all js code within src folder

src/index.js


es6apps/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ES6 APPS</title>
</head>
<body>
    <h1>ES 6 apps</h1>
    <script src="src/index.js"></script>
</body>
</html>
.....................................................................................
1.variable declarations

var,let,const -keywords to declare variables
 
 let /const - es 6 keywords
eg:
 let firstName

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object


3.Data types
   js is dynamic typed language-the type of variable is understood only during runtime.
  int a =10 - strongly typed
  let a =20 - dynamic typed

  literal   - type
....................
  string    - string
  number    - number
  boolean   - boolean
  undfined   - undefined
  NaN       - number
  Infinity  - number
  function  - function
  object    - object
  null      - object

Running Env:

1.node js - command line
2.Browser
3.Mobile

....................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types


....................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types


Strings:
//strings : "",'',``,${}
//Strings
let firstName = "Subramanian"
let lastName = 'Murugan'
//back tick and string interpolation
let fullName = firstName + lastName // traditional 
console.log('Name' + firstName)
//back tick 
fullName = `${firstName} ${lastName}`
console.log(`Full Name ${fullName}`) // string interpoltion

//multi line strings
let doc = `
   <html>
      <head>
          <title></title>
      </head>
    <body>
    </body>
 </html>
`
console.log(doc)

Numbers:
 only type called number 
 64 bit aka double.

//numbers
let a = 10
let b = 20
let c = a + b 
console.log(`c ${c}`)

Booleans:
 true or false

//true or false 

let isValid = true
let isEnabled = false
console.log(`Valid ${isValid} Enabled ${isEnabled}`)


Undefined:
 Variable is declared without any valid value.

let price;
console.log(`Price is ${price}`)

NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix beacuse is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let price;
let qty = 100;
let totalPrice = price * qty; //undefined * 100
console.log(`Total Price is ${totalPrice}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)

..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */
..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

in javascript is every thing is true execept the following values 

Falsy values

 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */

//advanced booleans 

let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is ${myvar}`)
}
....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}
...................................................................................
....................................................................................
				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==

let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}

const:
   it is read only where as let is reassignable.

let a = 10;
console.log(`a ${a}`)
a = 90
console.log(`a ${a}`)

const b = 90;
console.log(`b ${b}`)
b = 90
console.log(`b ${b}`)
.....................................................................................
.....................................................................................
			   Functions
....................................................................................

functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values


//basic function declaration

function sayHello() {
    console.log('hello')
}
//invoke function 
sayHello()
			
..

function args,parameters, with default value
//default args and parameters

function math(a = 0, b = 0) {
    let c = a * b
    console.log(`Result is ${c}`)
}
math(10, 10)
math("a", "b")
math()

functions and return values:
............................
function math(a = 0, b = 0) {
   return a * b
}
const result = math(10, 10)
console.log(result)
console.log(math())

....................................................................................
			  Functional Programming
....................................................................................
According to functional programming, function is just value like numbers,strings.

since function is value can be assigned to a variable.

If you assign the function with variable, then that function can be called with variableName.

if you declare function with variables, without function name called "Anonymous function".

//a is variable
//let is keyword
//10 is literal - number literal
let a = 10;
//function itself is literal accoriding to functional programming.

//hello is just variable,holding function value(literal)
let hello = function () {
    console.log('hello')
}
//since function is value , can be assigned to variable, later that variable can be used to invoke that function. 
//function without name is called anonymous function 
hello()

............

AnonyMous functions and args values:
......................................

//anonymous fun and args 

let add = function (a = 0, b = 0) {
    let c = a + b
    console.log(`C ${c}`)
}

add(10, 10)
add()

anonymous functions and return values:
//anonymous fun and args 

let add = function (a = 0, b = 0) {
    let c = a + b
    return c 
}

console.log(add(10, 10))
console.log(add())
.....................................................................................
			Anonymous function with arrow notation
				Arrow functions
.....................................................................................
//es 5 anonymous function
let hello = function () {
    console.log('hello')
}
hello()
//es 6 arrow anonymous function
let hai = () => {
    console.log('hai')
}
hai()
//short cut: if function body has only one line of code: we can remove {}
hai = () => console.log('hai')
hai()
//arrow with parameters
let math = (a = 0, b = 0) => {
    let c = a * b
    console.log(`C ${c}`)
}
math(10, 10)
//arrow with parameters, with return
let multiply = (a = 0, b = 0) => {
    return a * b
}
console.log(multiply(10, 10))

//if fun has only return statement, we can remove {} and return statement
multiply = (a = 0, b = 0) => a * b
console.log(multiply(10, 10))


.....................................................................................			 	Higher order functions
....................................................................................
   Since function is value can be passed to another function as parameter(value) and also return function from  another function.

//function as parameter

function add(a, b) {
    return a + b
}
//passing value
//via variable
let x = 10
let y = 20
console.log(add(x, y))

//via values directly
console.log(add(20, 30))
///////////////////////////////////////////////////////////

function connect(cb) {
    cb()
}
let hello = function () {
    console.log('hello')
}
connect(hello)

connect(function () {
    console.log('hello')
})
//////////////////////////////////////////////////////////////////////////////
//hof with parameters
function calculate(cb) {
    cb(20, 30)
}
let adder = function (a = 0, b = 20) {
    console.log(a + b)
}
calculate(adder)
calculate(function (a = 0, b = 0) {
    console.log(a + b)
})
//hof with parameters and return value

function calc(cb) {
    let result = cb(10, 10)
    console.log(result)
}
adder = function (a = 0, b = 20) {
    return a + b
}
calc(adder)
calc(function (a = 0, b = 0) {
    return a + b
})
//hof with other parameters

function login(userName, password, success, failure) {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }
}
login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
login('foo', 'bar', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})





